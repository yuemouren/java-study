<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ujiuye.mapper.EmailMapper">
    <resultMap id="BaseResultMap" type="com.ujiuye.bean.Email">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="ename" property="ename" jdbcType="VARCHAR"/>
        <result column="sendtime" property="sendtime" jdbcType="DATE"/>
        <result column="content" property="content" jdbcType="VARCHAR"/>
        <result column="send_emp_fk" property="sendEmpFk" jdbcType="INTEGER"/>
        <result column="path" property="path" jdbcType="VARCHAR"/>
        <result column="receive_emp_fk" property="receiveEmpFk" jdbcType="INTEGER"/>
        <result column="look_state" property="lookState" jdbcType="INTEGER"/>
        <result column="return_state" property="returnState" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, title, ename, sendtime, content, send_emp_fk, path, receive_emp_fk, look_state,
        return_state
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ujiuye.bean.EmailExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from email
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from email
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from email
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.ujiuye.bean.EmailExample">
        delete from email
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.ujiuye.bean.Email">
        insert into email (id, title, ename,
        sendtime, content, send_emp_fk,
        path, receive_emp_fk, look_state,
        return_state)
        values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{ename,jdbcType=VARCHAR},
        #{sendtime,jdbcType=DATE}, #{content,jdbcType=VARCHAR}, #{sendEmpFk,jdbcType=INTEGER},
        #{path,jdbcType=VARCHAR}, #{receiveEmpFk,jdbcType=INTEGER}, #{lookState,jdbcType=INTEGER},
        #{returnState,jdbcType=INTEGER})
    </insert>
    <insert id="insertSelective" parameterType="com.ujiuye.bean.Email">
        insert into email
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="ename != null">
                ename,
            </if>
            <if test="sendtime != null">
                sendtime,
            </if>
            <if test="content != null">
                content,
            </if>
            <if test="sendEmpFk != null">
                send_emp_fk,
            </if>
            <if test="path != null">
                path,
            </if>
            <if test="receiveEmpFk != null">
                receive_emp_fk,
            </if>
            <if test="lookState != null">
                look_state,
            </if>
            <if test="returnState != null">
                return_state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="title != null">
                #{title,jdbcType=VARCHAR},
            </if>
            <if test="ename != null">
                #{ename,jdbcType=VARCHAR},
            </if>
            <if test="sendtime != null">
                #{sendtime,jdbcType=DATE},
            </if>
            <if test="content != null">
                #{content,jdbcType=VARCHAR},
            </if>
            <if test="sendEmpFk != null">
                #{sendEmpFk,jdbcType=INTEGER},
            </if>
            <if test="path != null">
                #{path,jdbcType=VARCHAR},
            </if>
            <if test="receiveEmpFk != null">
                #{receiveEmpFk,jdbcType=INTEGER},
            </if>
            <if test="lookState != null">
                #{lookState,jdbcType=INTEGER},
            </if>
            <if test="returnState != null">
                #{returnState,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.ujiuye.bean.EmailExample" resultType="java.lang.Integer">
        select count(*) from email
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update email
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.title != null">
                title = #{record.title,jdbcType=VARCHAR},
            </if>
            <if test="record.ename != null">
                ename = #{record.ename,jdbcType=VARCHAR},
            </if>
            <if test="record.sendtime != null">
                sendtime = #{record.sendtime,jdbcType=DATE},
            </if>
            <if test="record.content != null">
                content = #{record.content,jdbcType=VARCHAR},
            </if>
            <if test="record.sendEmpFk != null">
                send_emp_fk = #{record.sendEmpFk,jdbcType=INTEGER},
            </if>
            <if test="record.path != null">
                path = #{record.path,jdbcType=VARCHAR},
            </if>
            <if test="record.receiveEmpFk != null">
                receive_emp_fk = #{record.receiveEmpFk,jdbcType=INTEGER},
            </if>
            <if test="record.lookState != null">
                look_state = #{record.lookState,jdbcType=INTEGER},
            </if>
            <if test="record.returnState != null">
                return_state = #{record.returnState,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update email
        set id = #{record.id,jdbcType=INTEGER},
        title = #{record.title,jdbcType=VARCHAR},
        ename = #{record.ename,jdbcType=VARCHAR},
        sendtime = #{record.sendtime,jdbcType=DATE},
        content = #{record.content,jdbcType=VARCHAR},
        send_emp_fk = #{record.sendEmpFk,jdbcType=INTEGER},
        path = #{record.path,jdbcType=VARCHAR},
        receive_emp_fk = #{record.receiveEmpFk,jdbcType=INTEGER},
        look_state = #{record.lookState,jdbcType=INTEGER},
        return_state = #{record.returnState,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.ujiuye.bean.Email">
        update email
        <set>
            <if test="title != null">
                title = #{title,jdbcType=VARCHAR},
            </if>
            <if test="ename != null">
                ename = #{ename,jdbcType=VARCHAR},
            </if>
            <if test="sendtime != null">
                sendtime = #{sendtime,jdbcType=DATE},
            </if>
            <if test="content != null">
                content = #{content,jdbcType=VARCHAR},
            </if>
            <if test="sendEmpFk != null">
                send_emp_fk = #{sendEmpFk,jdbcType=INTEGER},
            </if>
            <if test="path != null">
                path = #{path,jdbcType=VARCHAR},
            </if>
            <if test="receiveEmpFk != null">
                receive_emp_fk = #{receiveEmpFk,jdbcType=INTEGER},
            </if>
            <if test="lookState != null">
                look_state = #{lookState,jdbcType=INTEGER},
            </if>
            <if test="returnState != null">
                return_state = #{returnState,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.ujiuye.bean.Email">
        update email
        set title = #{title,jdbcType=VARCHAR},
        ename = #{ename,jdbcType=VARCHAR},
        sendtime = #{sendtime,jdbcType=DATE},
        content = #{content,jdbcType=VARCHAR},
        send_emp_fk = #{sendEmpFk,jdbcType=INTEGER},
        path = #{path,jdbcType=VARCHAR},
        receive_emp_fk = #{receiveEmpFk,jdbcType=INTEGER},
        look_state = #{lookState,jdbcType=INTEGER},
        return_state = #{returnState,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>